<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">
    <resultMap id="BaseResultMap" type="com.nowcoder.community.entity.Message">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="from_id" jdbcType="INTEGER" property="fromId"/>
        <result column="to_id" jdbcType="INTEGER" property="toId"/>
        <result column="conversation_id" jdbcType="VARCHAR" property="conversationId"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.nowcoder.community.entity.Message">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , from_id, to_id, conversation_id, status, create_time
    </sql>
    <sql id="Blob_Column_List">
        content
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from message
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectConversations" resultType="com.nowcoder.community.entity.Message">
        select<include refid="Base_Column_List"/>,
        <include refid="Blob_Column_List"/>
        from message
        where id in (
        select max(id) as max_id
        from message
        where status !=2
        and (from_id != 1 and to_id != 1)
        and (from_id = #{userId} or to_id = #{userId})
        group by conversation_id
        )
        order by create_time desc
        limit #{offset}, #{limit}
    </select>
    <select id="selectConvesrsationCount" resultType="java.lang.Integer">
        select count(m.max_id)
        from (select max(id) as max_id
              from message
              where status !=2
        and from_id != 1
        and (from_id = #{userId}
                 or to_id = #{userId})
              group by conversation_id) as m
    </select>
    <select id="selectLetters" resultType="com.nowcoder.community.entity.Message">
        select<include refid="Base_Column_List"/>,
        <include refid="Blob_Column_List"/>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        order by create_time desc
        limit #{offset}, #{limit}
    </select>
    <select id="selectLetterCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where conversation_id = #{conversationId}
          and status != 2
    </select>
    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status = 0
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>
    <select id="selectLatestNotice" resultType="com.nowcoder.community.entity.Message">
        select<include refid="Base_Column_List"/>,
        <include refid="Blob_Column_List"/>
        from message
        where id in(
        select max(id)
        from message
        where conversation_id = #{topic}
        and from_id = 1
        and to_id = #{userId}
        and status != 2
        )
    </select>
    <select id="selectNoticeCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where to_id = #{userId}
          and status != 2
          and from_id = 1
        and conversation_id = #{topic}

    </select>
    <select id="selectUnreadNoticeCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where to_id = #{userId}
        and status = 0
        and from_id = 1
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>

    </select>
    <select id="selectNotices" resultType="com.nowcoder.community.entity.Message">
        select<include refid="Base_Column_List"/>,
        <include refid="Blob_Column_List"/>
        from message
        where from_id =1
        and to_id = #{userId}
        and conversation_id = #{topic}
        and status !=2
        limit #{offset}, #{limit}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from message
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.nowcoder.community.entity.Message"
            useGeneratedKeys="true">
        insert into message (from_id, to_id, conversation_id,
                             status, create_time, content)
        values (#{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER}, #{conversationId,jdbcType=VARCHAR},
                #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.nowcoder.community.entity.Message"
            useGeneratedKeys="true">
        insert into message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="fromId != null">
                from_id,
            </if>
            <if test="toId != null">
                to_id,
            </if>
            <if test="conversationId != null">
                conversation_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="fromId != null">
                #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                #{toId,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.nowcoder.community.entity.Message">
        update message
        <set>
            <if test="fromId != null">
                from_id = #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                to_id = #{toId,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                conversation_id = #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.nowcoder.community.entity.Message">
        update message
        set from_id         = #{fromId,jdbcType=INTEGER},
            to_id           = #{toId,jdbcType=INTEGER},
            conversation_id = #{conversationId,jdbcType=VARCHAR},
            status          = #{status,jdbcType=INTEGER},
            create_time     = #{createTime,jdbcType=TIMESTAMP},
            content         = #{content,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.nowcoder.community.entity.Message">
        update message
        set from_id         = #{fromId,jdbcType=INTEGER},
            to_id           = #{toId,jdbcType=INTEGER},
            conversation_id = #{conversationId,jdbcType=VARCHAR},
            status          = #{status,jdbcType=INTEGER},
            create_time     = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>
    <update id="updateNoticeStatus">
        update message
        set status = 1
        where from_id = 1
          and to_id = #{userId}
          and status = 0
          and conversation_id = #{topic}
    </update>
</mapper>